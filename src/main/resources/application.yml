server:
  port: 9000
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s

spring:
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: polar-keycloak-secret
            scope: openid
        provider:
          keycloak: # registration id, defined upper
            issuer-uri: http://localhost:8080/realms/PolarBookshop
  application:
    name: edge-service
  config:
    import: "optional:configserver:"
  lifecycle:
    timeout-per-shutdown-phase: 15s
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false
      retry:
        max-attempts: 6
        multiplier: 1.1
        initial-interval: 1000
        max-interval: 2000
    gateway:
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: ELASTIC
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - SaveSession
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false

  redis:
    connect-timeout: 2s
    host: localhost
    port: 6379
    timeout: 1s

  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge


logging:
  level:
    org.springframework.retry: DEBUG
    io.github.resilience4j: DEBUG

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

